
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import java.io.FileOutputStream;
import java.io.PrintStream;
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.util.*;
import fr.n7.stl.tam.ast.Register;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.impl.TAMFactoryImpl;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\003\000\002\002\004\000\002\022" +
    "\003\000\002\022\004\000\002\022\005\000\002\024\010" +
    "\000\002\023\017\000\002\026\002\000\002\026\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\003\000\002\036\002\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\005\000\002\030\010" +
    "\000\002\030\011\000\002\032\004\000\002\032\005\000" +
    "\002\032\005\000\002\032\006\000\002\032\005\000\002" +
    "\031\007\000\002\031\006\000\002\033\007\000\002\033" +
    "\006\000\002\003\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\016\003\000\002\016\003\000\002" +
    "\004\004\000\002\004\002\000\002\015\003\000\002\015" +
    "\005\000\002\014\006\000\002\014\004\000\002\006\007" +
    "\000\002\005\003\000\002\005\006\000\002\005\004\000" +
    "\002\005\005\000\002\005\011\000\002\005\007\000\002" +
    "\005\007\000\002\005\005\000\002\007\005\000\002\007" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\006\000\002\021\005\000\002\021\006\000" +
    "\002\021\006\000\002\021\005\000\002\021\005\000\002" +
    "\021\006\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\004\000\002\020\004\000\002\020" +
    "\006\000\002\020\005\000\002\020\007\000\002\020\005" +
    "\000\002\020\006\000\002\020\006\000\002\020\003\000" +
    "\002\020\006\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\007\000\002\020\006\000" +
    "\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\010\004\011\006\006\012\007\001\002\000" +
    "\004\002\341\001\002\000\010\004\011\006\006\012\007" +
    "\001\002\000\004\004\324\001\002\000\004\004\011\001" +
    "\002\000\004\002\uffff\001\002\000\004\102\013\001\002" +
    "\000\004\002\001\001\002\000\002\001\002\000\004\050" +
    "\015\001\002\000\012\006\016\007\020\010\017\051\ufffa" +
    "\001\002\000\026\011\ufff8\012\ufff8\013\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\001\002" +
    "\000\026\011\ufff7\012\ufff7\013\ufff7\074\ufff7\075\ufff7\076" +
    "\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\001\002\000\026" +
    "\011\ufff6\012\ufff6\013\ufff6\074\ufff6\075\ufff6\076\ufff6\077" +
    "\ufff6\100\ufff6\101\ufff6\102\ufff6\001\002\000\026\011\040" +
    "\012\031\013\036\074\042\075\034\076\043\077\035\100" +
    "\032\101\037\102\033\001\002\000\004\051\023\001\002" +
    "\000\010\004\ufffc\006\ufffc\012\ufffc\001\002\000\004\102" +
    "\226\001\002\000\012\006\016\007\020\010\017\051\ufffa" +
    "\001\002\000\012\006\ufff3\007\ufff3\010\ufff3\051\ufff3\001" +
    "\002\000\012\006\ufff2\007\ufff2\010\ufff2\051\ufff2\001\002" +
    "\000\004\050\051\001\002\000\020\074\042\075\034\076" +
    "\043\077\035\100\032\101\037\102\047\001\002\000\012" +
    "\044\uffdf\045\uffdf\052\uffdf\102\uffdf\001\002\000\006\044" +
    "\306\102\uffdc\001\002\000\012\044\uffe2\045\uffe2\052\uffe2" +
    "\102\uffe2\001\002\000\012\044\uffe0\045\uffe0\052\uffe0\102" +
    "\uffe0\001\002\000\022\011\271\074\042\075\034\076\043" +
    "\077\035\100\032\101\037\102\047\001\002\000\012\044" +
    "\uffde\045\uffde\052\uffde\102\uffde\001\002\000\020\074\042" +
    "\075\034\076\043\077\035\100\032\101\037\102\047\001" +
    "\002\000\012\006\ufff1\007\ufff1\010\ufff1\051\ufff1\001\002" +
    "\000\012\044\uffe3\045\uffe3\052\uffe3\102\uffe3\001\002\000" +
    "\012\044\uffe1\045\uffe1\052\uffe1\102\uffe1\001\002\000\010" +
    "\044\uffdd\052\uffdd\102\uffdd\001\002\000\004\102\226\001" +
    "\002\000\004\050\051\001\002\000\010\044\uffdc\052\uffdc" +
    "\102\uffdc\001\002\000\012\006\uffec\007\uffec\010\uffec\051" +
    "\uffec\001\002\000\040\016\uffda\017\uffda\044\uffda\051\uffda" +
    "\062\uffda\064\uffda\066\uffda\067\uffda\074\uffda\075\uffda\076" +
    "\uffda\077\uffda\100\uffda\101\uffda\102\uffda\001\002\000\040" +
    "\016\064\017\055\044\057\051\065\062\060\064\067\066" +
    "\066\067\054\074\042\075\034\076\043\077\035\100\032" +
    "\101\037\102\061\001\002\000\040\016\uffdb\017\uffdb\044" +
    "\uffdb\051\uffdb\062\uffdb\064\uffdb\066\uffdb\067\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\001" +
    "\002\000\036\016\076\017\103\025\071\034\107\044\106" +
    "\065\100\102\101\103\072\104\104\105\105\106\077\107" +
    "\075\110\074\111\073\001\002\000\016\020\uffc8\022\uffc8" +
    "\026\uffc8\044\uffc8\045\uffc8\052\uffc8\001\002\000\040\016" +
    "\uffd4\017\uffd4\044\uffd4\051\uffd4\062\uffd4\064\uffd4\066\uffd4" +
    "\067\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101" +
    "\uffd4\102\uffd4\001\002\000\026\016\064\017\055\044\057" +
    "\074\042\075\034\076\043\077\035\100\032\101\037\102" +
    "\242\001\002\000\004\044\234\001\002\000\016\020\uffca" +
    "\022\uffca\026\uffca\044\uffca\052\uffca\102\uffdc\001\002\000" +
    "\004\102\226\001\002\000\014\020\210\022\214\026\211" +
    "\044\213\052\212\001\002\000\016\020\uffc9\022\uffc9\026" +
    "\uffc9\044\uffc9\045\uffc9\052\uffc9\001\002\000\050\006\uffe4" +
    "\007\uffe4\010\uffe4\016\uffe4\017\uffe4\044\uffe4\051\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4\074\uffe4\075\uffe4" +
    "\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\001\002\000" +
    "\036\016\076\017\103\025\071\034\107\044\106\065\100" +
    "\102\101\103\072\104\104\105\105\106\077\107\075\110" +
    "\074\111\073\001\002\000\004\044\070\001\002\000\036" +
    "\016\076\017\103\025\071\034\107\044\106\065\100\102" +
    "\101\103\072\104\104\105\105\106\077\107\075\110\074" +
    "\111\073\001\002\000\036\016\076\017\103\025\071\034" +
    "\107\044\106\065\100\102\101\103\072\104\104\105\105" +
    "\106\077\107\075\110\074\111\073\001\002\000\056\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\033\uffa0\034\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\001\002\000\056\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\001\002\000\056\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\033\uffa7\034\uffa7\036\uffa7\037\uffa7\040\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\001\002\000\056" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\033\uffa3\034" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\001\002\000\056\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\033\uffa5\034\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\001\002\000\056\020\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\033\uffa2\034\uffa2\036\uffa2\037\uffa2\040\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\001\002\000" +
    "\020\074\042\075\034\076\043\077\035\100\032\101\037" +
    "\102\047\001\002\000\056\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\033\uffab\034\uffab\036\uffab\037\uffab\040\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\001\002" +
    "\000\046\022\122\024\125\033\113\034\127\036\124\037" +
    "\116\040\120\042\111\043\112\044\130\045\173\052\115" +
    "\054\121\055\131\056\123\057\126\060\114\061\117\001" +
    "\002\000\056\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\033\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\001\002\000\056\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\033\uffa1\034\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\001\002\000\056\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\001\002\000\052\016\076\017\103\025\071\034\107\044" +
    "\106\065\100\074\042\075\034\076\043\077\035\100\032" +
    "\101\037\102\163\103\072\104\104\105\105\106\077\107" +
    "\075\110\074\111\073\001\002\000\036\016\076\017\103" +
    "\025\071\034\107\044\106\065\100\102\101\103\072\104" +
    "\104\105\105\106\077\107\075\110\074\111\073\001\002" +
    "\000\056\020\uffb3\021\uffb3\022\122\023\uffb3\024\uffb3\033" +
    "\uffb3\034\uffb3\036\124\037\116\040\120\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002\000\036\016\076" +
    "\017\103\025\071\034\107\044\106\065\100\102\101\103" +
    "\072\104\104\105\105\106\077\107\075\110\074\111\073" +
    "\001\002\000\036\016\076\017\103\025\071\034\107\044" +
    "\106\065\100\102\101\103\072\104\104\105\105\106\077" +
    "\107\075\110\074\111\073\001\002\000\036\016\076\017" +
    "\103\025\071\034\107\044\106\065\100\102\101\103\072" +
    "\104\104\105\105\106\077\107\075\110\074\111\073\001" +
    "\002\000\036\016\076\017\103\025\071\034\107\044\106" +
    "\065\100\102\101\103\072\104\104\105\105\106\077\107" +
    "\075\110\074\111\073\001\002\000\036\016\076\017\103" +
    "\025\071\034\107\044\106\065\100\102\101\103\072\104" +
    "\104\105\105\106\077\107\075\110\074\111\073\001\002" +
    "\000\036\016\076\017\103\025\071\034\107\044\106\065" +
    "\100\102\101\103\072\104\104\105\105\106\077\107\075" +
    "\110\074\111\073\001\002\000\036\016\076\017\103\025" +
    "\071\034\107\044\106\065\100\102\101\103\072\104\104" +
    "\105\105\106\077\107\075\110\074\111\073\001\002\000" +
    "\036\016\076\017\103\025\071\034\107\044\106\065\100" +
    "\102\101\103\072\104\104\105\105\106\077\107\075\110" +
    "\074\111\073\001\002\000\036\016\076\017\103\025\071" +
    "\034\107\044\106\065\100\102\101\103\072\104\104\105" +
    "\105\106\077\107\075\110\074\111\073\001\002\000\004" +
    "\102\150\001\002\000\036\016\076\017\103\025\071\034" +
    "\107\044\106\065\100\102\101\103\072\104\104\105\105" +
    "\106\077\107\075\110\074\111\073\001\002\000\036\016" +
    "\076\017\103\025\071\034\107\044\106\065\100\102\101" +
    "\103\072\104\104\105\105\106\077\107\075\110\074\111" +
    "\073\001\002\000\036\016\076\017\103\025\071\034\107" +
    "\044\106\065\100\102\101\103\072\104\104\105\105\106" +
    "\077\107\075\110\074\111\073\001\002\000\036\016\076" +
    "\017\103\025\071\034\107\044\106\065\100\102\101\103" +
    "\072\104\104\105\105\106\077\107\075\110\074\111\073" +
    "\001\002\000\036\016\076\017\103\025\071\034\107\044" +
    "\106\065\100\102\101\103\072\104\104\105\105\106\077" +
    "\107\075\110\074\111\073\001\002\000\040\016\076\017" +
    "\103\025\071\034\107\044\106\045\133\065\100\102\101" +
    "\103\072\104\104\105\105\106\077\107\075\110\074\111" +
    "\073\001\002\000\036\016\076\017\103\025\071\034\107" +
    "\044\106\065\100\102\101\103\072\104\104\105\105\106" +
    "\077\107\075\110\074\111\073\001\002\000\046\020\uffbd" +
    "\021\uffbd\022\122\023\uffbd\024\uffbd\033\113\034\127\036" +
    "\124\037\116\040\120\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\052\uffbd\053\uffbd\060\uffbd\061\uffbd\001\002\000\056\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\033\uffa9\034\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\001\002\000\050\021\uffcb\022\122\024" +
    "\125\033\113\034\127\036\124\037\116\040\120\042\111" +
    "\043\112\044\130\045\uffcb\052\115\054\121\055\131\056" +
    "\123\057\126\060\114\061\117\001\002\000\006\021\136" +
    "\045\137\001\002\000\036\016\076\017\103\025\071\034" +
    "\107\044\106\065\100\102\101\103\072\104\104\105\105" +
    "\106\077\107\075\110\074\111\073\001\002\000\056\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\033\uffaa\034\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\001\002\000\050\021\uffcc\022\122\024" +
    "\125\033\113\034\127\036\124\037\116\040\120\042\111" +
    "\043\112\044\130\045\uffcc\052\115\054\121\055\131\056" +
    "\123\057\126\060\114\061\117\001\002\000\056\020\uffb7" +
    "\021\uffb7\022\122\023\uffb7\024\uffb7\033\uffb7\034\uffb7\036" +
    "\124\037\116\040\120\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\001\002\000\046\020\uffbb\021\uffbb\022\122" +
    "\023\uffbb\024\uffbb\033\113\034\127\036\124\037\116\040" +
    "\120\042\uffbb\043\uffbb\044\uffbb\045\uffbb\052\uffbb\053\uffbb" +
    "\060\uffbb\061\uffbb\001\002\000\046\022\122\023\144\024" +
    "\125\033\113\034\127\036\124\037\116\040\120\042\111" +
    "\043\112\044\130\052\115\054\121\055\131\056\123\057" +
    "\126\060\114\061\117\001\002\000\036\016\076\017\103" +
    "\025\071\034\107\044\106\065\100\102\101\103\072\104" +
    "\104\105\105\106\077\107\075\110\074\111\073\001\002" +
    "\000\054\020\uffaf\021\uffaf\022\122\023\uffaf\033\113\034" +
    "\127\036\124\037\116\040\120\042\111\043\112\044\uffaf" +
    "\045\uffaf\052\uffaf\053\uffaf\054\121\055\131\056\123\057" +
    "\126\060\114\061\117\001\002\000\056\020\uffb6\021\uffb6" +
    "\022\122\023\uffb6\024\uffb6\033\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\001\002\000\046\020\uffbc\021\uffbc\022\122\023\uffbc" +
    "\024\uffbc\033\113\034\127\036\124\037\116\040\120\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\052\uffbc\053\uffbc\060\uffbc" +
    "\061\uffbc\001\002\000\056\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\001\002" +
    "\000\046\020\uffbe\021\uffbe\022\122\023\uffbe\024\uffbe\033" +
    "\113\034\127\036\124\037\116\040\120\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\052\uffbe\053\uffbe\060\uffbe\061\uffbe\001" +
    "\002\000\056\020\uffb4\021\uffb4\022\122\023\uffb4\024\uffb4" +
    "\033\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000\052\020" +
    "\uffbf\021\uffbf\022\122\023\uffbf\024\uffbf\033\113\034\127" +
    "\036\124\037\116\040\120\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\052\uffbf\053\uffbf\054\121\055\131\056\123\057\126" +
    "\001\002\000\056\020\uffb5\021\uffb5\022\122\023\uffb5\024" +
    "\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\001\002\000\046" +
    "\022\122\024\125\033\113\034\127\036\124\037\116\040" +
    "\120\042\111\043\112\044\130\052\115\053\156\054\121" +
    "\055\131\056\123\057\126\060\114\061\117\001\002\000" +
    "\056\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\033\uffb1" +
    "\034\uffb1\036\uffb1\037\uffb1\040\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\001\002\000\052\020\uffc0\021" +
    "\uffc0\022\122\023\uffc0\024\uffc0\033\113\034\127\036\124" +
    "\037\116\040\120\042\uffc0\043\uffc0\044\uffc0\045\uffc0\052" +
    "\uffc0\053\uffc0\054\121\055\131\056\123\057\126\001\002" +
    "\000\056\020\uffb8\021\uffb8\022\122\023\uffb8\024\uffb8\033" +
    "\uffb8\034\uffb8\036\124\037\116\040\120\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\001\002\000\056\020\uffb9" +
    "\021\uffb9\022\122\023\uffb9\024\uffb9\033\113\034\127\036" +
    "\124\037\116\040\120\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\052\uffb9\053\uffb9\054\121\055\131\056\123\057\126\060" +
    "\114\061\117\001\002\000\056\020\uffba\021\uffba\022\122" +
    "\023\uffba\024\uffba\033\113\034\127\036\124\037\116\040" +
    "\120\042\uffba\043\112\044\uffba\045\uffba\052\uffba\053\uffba" +
    "\054\121\055\131\056\123\057\126\060\114\061\117\001" +
    "\002\000\046\022\uffab\024\uffab\033\uffab\034\uffab\036\uffab" +
    "\037\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045\171\052" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\001\002\000\004\045\167\001\002\000\046\022\122\024" +
    "\125\033\113\034\127\036\124\037\116\040\120\042\111" +
    "\043\112\044\130\045\166\052\115\054\121\055\131\056" +
    "\123\057\126\060\114\061\117\001\002\000\056\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\033\uffae\034\uffae\036" +
    "\uffae\037\uffae\040\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\001\002\000\036\016\076\017\103\025\071" +
    "\034\107\044\106\065\100\102\101\103\072\104\104\105" +
    "\105\106\077\107\075\110\074\111\073\001\002\000\056" +
    "\020\uffac\021\uffac\022\122\023\uffac\024\125\033\113\034" +
    "\127\036\124\037\116\040\120\042\111\043\112\044\uffac" +
    "\045\uffac\052\uffac\053\uffac\054\121\055\131\056\123\057" +
    "\126\060\114\061\117\001\002\000\036\016\076\017\103" +
    "\025\071\034\107\044\106\065\100\102\101\103\072\104" +
    "\104\105\105\106\077\107\075\110\074\111\073\001\002" +
    "\000\056\020\uffad\021\uffad\022\122\023\uffad\024\125\033" +
    "\113\034\127\036\124\037\116\040\120\042\111\043\112" +
    "\044\uffad\045\uffad\052\uffad\053\uffad\054\121\055\131\056" +
    "\123\057\126\060\114\061\117\001\002\000\004\050\051" +
    "\001\002\000\040\016\uffce\017\uffce\044\uffce\051\uffce\062" +
    "\uffce\064\uffce\066\uffce\067\uffce\074\uffce\075\uffce\076\uffce" +
    "\077\uffce\100\uffce\101\uffce\102\uffce\001\002\000\006\044" +
    "\177\052\176\001\002\000\036\016\076\017\103\025\071" +
    "\034\107\044\106\065\100\102\101\103\072\104\104\105" +
    "\105\106\077\107\075\110\074\111\073\001\002\000\040" +
    "\016\076\017\103\025\071\034\107\044\106\045\200\065" +
    "\100\102\101\103\072\104\104\105\105\106\077\107\075" +
    "\110\074\111\073\001\002\000\056\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\033\uff9e\034\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\001\002\000\006\021\136\045\202\001\002\000\056\020" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\033\uff9d\034\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\001\002\000\046\022\122\024\125\033" +
    "\113\034\127\036\124\037\116\040\120\042\111\043\112" +
    "\044\130\052\115\053\204\054\121\055\131\056\123\057" +
    "\126\060\114\061\117\001\002\000\056\020\uff9f\021\uff9f" +
    "\022\uff9f\023\uff9f\024\uff9f\033\uff9f\034\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\001\002\000\056\020\uffb2\021\uffb2\022\122\023\uffb2" +
    "\024\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002\000" +
    "\046\020\207\022\122\024\125\033\113\034\127\036\124" +
    "\037\116\040\120\042\111\043\112\044\130\052\115\054" +
    "\121\055\131\056\123\057\126\060\114\061\117\001\002" +
    "\000\040\016\uffd1\017\uffd1\044\uffd1\051\uffd1\062\uffd1\064" +
    "\uffd1\066\uffd1\067\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\001\002\000\040\016\uffd2\017" +
    "\uffd2\044\uffd2\051\uffd2\062\uffd2\064\uffd2\066\uffd2\067\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102" +
    "\uffd2\001\002\000\036\016\076\017\103\025\071\034\107" +
    "\044\106\065\100\102\101\103\072\104\104\105\105\106" +
    "\077\107\075\110\074\111\073\001\002\000\036\016\076" +
    "\017\103\025\071\034\107\044\106\065\100\102\101\103" +
    "\072\104\104\105\105\106\077\107\075\110\074\111\073" +
    "\001\002\000\040\016\076\017\103\025\071\034\107\044" +
    "\106\045\216\065\100\102\101\103\072\104\104\105\105" +
    "\106\077\107\075\110\074\111\073\001\002\000\004\102" +
    "\215\001\002\000\016\020\uffc3\022\uffc3\026\uffc3\044\uffc3" +
    "\045\uffc3\052\uffc3\001\002\000\016\020\uffc2\022\uffc2\026" +
    "\uffc2\044\uffc2\045\uffc2\052\uffc2\001\002\000\006\021\136" +
    "\045\220\001\002\000\016\020\uffc1\022\uffc1\026\uffc1\044" +
    "\uffc1\045\uffc1\052\uffc1\001\002\000\046\022\122\024\125" +
    "\033\113\034\127\036\124\037\116\040\120\042\111\043" +
    "\112\044\130\052\115\053\222\054\121\055\131\056\123" +
    "\057\126\060\114\061\117\001\002\000\016\020\uffc7\022" +
    "\uffc7\026\uffc7\044\uffc7\045\uffc7\052\uffc7\001\002\000\046" +
    "\020\224\022\122\024\125\033\113\034\127\036\124\037" +
    "\116\040\120\042\111\043\112\044\130\052\115\054\121" +
    "\055\131\056\123\057\126\060\114\061\117\001\002\000" +
    "\040\016\uffd3\017\uffd3\044\uffd3\051\uffd3\062\uffd3\064\uffd3" +
    "\066\uffd3\067\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\101\uffd3\102\uffd3\001\002\000\006\026\227\052\230" +
    "\001\002\000\016\020\uffd9\021\uffd9\026\uffd9\044\uffd9\045" +
    "\uffd9\052\uffd9\001\002\000\036\016\076\017\103\025\071" +
    "\034\107\044\106\065\100\102\101\103\072\104\104\105" +
    "\105\106\077\107\075\110\074\111\073\001\002\000\004" +
    "\053\231\001\002\000\016\020\uffd8\021\uffd8\026\uffd8\044" +
    "\uffd8\045\uffd8\052\uffd8\001\002\000\046\020\233\022\122" +
    "\024\125\033\113\034\127\036\124\037\116\040\120\042" +
    "\111\043\112\044\130\052\115\054\121\055\131\056\123" +
    "\057\126\060\114\061\117\001\002\000\040\016\uffd5\017" +
    "\uffd5\044\uffd5\051\uffd5\062\uffd5\064\uffd5\066\uffd5\067\uffd5" +
    "\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102" +
    "\uffd5\001\002\000\036\016\076\017\103\025\071\034\107" +
    "\044\106\065\100\102\101\103\072\104\104\105\105\106" +
    "\077\107\075\110\074\111\073\001\002\000\046\022\122" +
    "\024\125\033\113\034\127\036\124\037\116\040\120\042" +
    "\111\043\112\044\130\045\236\052\115\054\121\055\131" +
    "\056\123\057\126\060\114\061\117\001\002\000\004\050" +
    "\051\001\002\000\042\016\uffcf\017\uffcf\044\uffcf\051\uffcf" +
    "\062\uffcf\063\240\064\uffcf\066\uffcf\067\uffcf\074\uffcf\075" +
    "\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\001\002" +
    "\000\004\050\051\001\002\000\040\016\uffd0\017\uffd0\044" +
    "\uffd0\051\uffd0\062\uffd0\064\uffd0\066\uffd0\067\uffd0\074\uffd0" +
    "\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\001" +
    "\002\000\012\022\uffca\044\uffca\045\251\052\uffca\001\002" +
    "\000\012\022\214\044\213\045\250\052\212\001\002\000" +
    "\004\045\245\001\002\000\012\016\064\017\055\044\057" +
    "\102\246\001\002\000\016\020\uffca\022\uffca\026\uffca\044" +
    "\uffca\045\uffca\052\uffca\001\002\000\016\020\uffc4\022\214" +
    "\026\uffc4\044\uffc4\045\uffc4\052\uffc4\001\002\000\016\020" +
    "\uffc6\022\uffc6\026\uffc6\044\uffc6\045\uffc6\052\uffc6\001\002" +
    "\000\012\016\064\017\055\044\057\102\246\001\002\000" +
    "\016\020\uffc5\022\214\026\uffc5\044\uffc5\045\uffc5\052\uffc5" +
    "\001\002\000\046\020\254\022\122\024\125\033\113\034" +
    "\127\036\124\037\116\040\120\042\111\043\112\044\130" +
    "\052\115\054\121\055\131\056\123\057\126\060\114\061" +
    "\117\001\002\000\040\016\uffcd\017\uffcd\044\uffcd\051\uffcd" +
    "\062\uffcd\064\uffcd\066\uffcd\067\uffcd\074\uffcd\075\uffcd\076" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\001\002\000\006" +
    "\044\256\052\230\001\002\000\022\045\260\074\042\075" +
    "\034\076\043\077\035\100\032\101\037\102\047\001\002" +
    "\000\004\102\226\001\002\000\006\020\uffe7\050\uffe7\001" +
    "\002\000\006\021\262\045\263\001\002\000\020\074\042" +
    "\075\034\076\043\077\035\100\032\101\037\102\047\001" +
    "\002\000\006\020\uffe8\050\uffe8\001\002\000\004\102\226" +
    "\001\002\000\010\021\uffd7\045\uffd7\052\230\001\002\000" +
    "\010\021\uffd6\045\uffd6\052\230\001\002\000\004\102\226" +
    "\001\002\000\004\050\051\001\002\000\020\074\042\075" +
    "\034\076\043\077\035\100\032\101\037\102\047\001\002" +
    "\000\004\102\226\001\002\000\004\050\051\001\002\000" +
    "\012\006\uffea\007\uffea\010\uffea\051\uffea\001\002\000\010" +
    "\026\276\044\256\052\230\001\002\000\036\016\076\017" +
    "\103\025\071\034\107\044\106\065\100\102\101\103\072" +
    "\104\104\105\105\106\077\107\075\110\074\111\073\001" +
    "\002\000\046\020\300\022\122\024\125\033\113\034\127" +
    "\036\124\037\116\040\120\042\111\043\112\044\130\052" +
    "\115\054\121\055\131\056\123\057\126\060\114\061\117" +
    "\001\002\000\012\006\uffee\007\uffee\010\uffee\051\uffee\001" +
    "\002\000\012\006\uffeb\007\uffeb\010\uffeb\051\uffeb\001\002" +
    "\000\010\026\303\044\256\052\230\001\002\000\036\016" +
    "\076\017\103\025\071\034\107\044\106\065\100\102\101" +
    "\103\072\104\104\105\105\106\077\107\075\110\074\111" +
    "\073\001\002\000\046\020\305\022\122\024\125\033\113" +
    "\034\127\036\124\037\116\040\120\042\111\043\112\044" +
    "\130\052\115\054\121\055\131\056\123\057\126\060\114" +
    "\061\117\001\002\000\012\006\uffef\007\uffef\010\uffef\051" +
    "\uffef\001\002\000\022\045\307\074\042\075\034\076\043" +
    "\077\035\100\032\101\037\102\047\001\002\000\004\050" +
    "\051\001\002\000\006\021\262\045\311\001\002\000\004" +
    "\050\051\001\002\000\012\006\uffe6\007\uffe6\010\uffe6\051" +
    "\uffe6\001\002\000\012\006\uffe5\007\uffe5\010\uffe5\051\uffe5" +
    "\001\002\000\004\020\315\001\002\000\012\006\uffe9\007" +
    "\uffe9\010\uffe9\051\uffe9\001\002\000\012\006\uffed\007\uffed" +
    "\010\uffed\051\uffed\001\002\000\004\051\ufff9\001\002\000" +
    "\010\020\321\044\256\052\230\001\002\000\012\006\ufff0" +
    "\007\ufff0\010\ufff0\051\ufff0\001\002\000\010\004\011\006" +
    "\006\012\007\001\002\000\004\002\ufffd\001\002\000\004" +
    "\014\325\001\002\000\004\050\326\001\002\000\004\006" +
    "\327\001\002\000\004\013\330\001\002\000\004\101\331" +
    "\001\002\000\004\015\332\001\002\000\004\044\333\001" +
    "\002\000\020\074\042\075\034\076\043\077\035\100\032" +
    "\101\037\102\047\001\002\000\006\021\262\045\335\001" +
    "\002\000\004\050\051\001\002\000\004\051\337\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\012\002\003\022\011\023\007\024\004\001" +
    "\001\000\002\001\001\000\010\022\337\023\007\024\004" +
    "\001\001\000\002\001\001\000\004\024\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\013\001\001\000\002\001\001\000\006\026\021\035" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\023\017\043\027\024\030\025\031" +
    "\027\032\026\033\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\317\001\001\000\006\026\316\035" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\315\001\001\000\010\016\044\017\043\031\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\266\017\043\031\267\001" +
    "\001\000\002\001\001\000\010\016\044\017\043\031\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\254\001\001\000\004" +
    "\003\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\051\001\001\000\014\005\052\006\055\016\061" +
    "\017\043\021\062\001\001\000\002\001\001\000\004\020" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\243\021\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\205\001\001\000" +
    "\002\001\001\000\004\020\101\001\001\000\004\020\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\174\017\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\163\020\164\001\001\000\004\020" +
    "\107\001\001\000\002\001\001\000\004\020\161\001\001" +
    "\000\004\020\160\001\001\000\004\020\157\001\001\000" +
    "\004\020\156\001\001\000\004\020\154\001\001\000\004" +
    "\020\153\001\001\000\004\020\152\001\001\000\004\020" +
    "\151\001\001\000\004\020\150\001\001\000\002\001\001" +
    "\000\004\020\146\001\001\000\004\020\145\001\001\000" +
    "\004\020\142\001\001\000\004\020\141\001\001\000\004" +
    "\020\140\001\001\000\006\007\134\020\133\001\001\000" +
    "\004\020\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\167\001" +
    "\001\000\002\001\001\000\004\020\171\001\001\000\002" +
    "\001\001\000\004\003\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\202\001\001\000\006\007\200" +
    "\020\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\222\001\001\000\004\020\220\001\001" +
    "\000\006\007\216\020\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\234" +
    "\001\001\000\002\001\001\000\004\003\236\001\001\000" +
    "\002\001\001\000\004\003\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\260\016\256\017\043\001\001\000\004\015" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\263\017\043\001\001\000\002\001\001\000\004\015" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\301\001\001\000\004\003\300\001\001\000\010\016" +
    "\271\017\043\031\272\001\001\000\004\015\274\001\001" +
    "\000\004\003\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\307\016\256\017\043\001\001\000\004\003\312\001" +
    "\001\000\002\001\001\000\004\003\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\322\023\007\024\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\333\016\256" +
    "\017\043\001\001\000\002\001\001\000\004\003\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.name);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

	protected Lexer lexer;
	protected String name;
	public Parser(String _name) {
		this();
		this.name = _name;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Elements 
            {
              Block RESULT =null;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object elements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 
				SymbolTable tds = new SymbolTable();
				TAMFactoryImpl tamFactory = new TAMFactoryImpl();
				Fragment code = tamFactory.createFragment();

				boolean collect_succeeded = true;

				for (ClassDeclaration elem : (List<ClassDeclaration>) elements) {
					//if (collect_succeeded && elem.collect(tds)) {
						//Prochaines étapes
					}
					//else {
					//	System.out.println("collect failed");
					//}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Elements ::= Main 
            {
              Object RESULT =null;
		Location mainxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mainxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4

			List<ClassDeclaration> elements = new LinkedList<ClassDeclaration>();
			((List) elements).add( (ClassDeclaration) main);
			RESULT = elements;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Elements ::= Class Elements 
            {
              Object RESULT =null;
		Location classexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location classexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object classe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object elements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5

			((List) elements).add((ClassDeclaration)classe);
			RESULT = elements;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Elements ::= UL_Abstrait Class Elements 
            {
              Object RESULT =null;
		Location classexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location classexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object classe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object elements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6

			((List) elements).add((ClassDeclaration)classe);
			RESULT = elements;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Class ::= UL_Classe UL_Identificateur SingleInherits UL_Accolade_Ouvrante ClassElements UL_Accolade_Fermante 
            {
              Object RESULT =null;
		Location classElementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location classElementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object classElements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG7

			RESULT = new ClassDeclaration("", new LinkedList<ClassElement>(), false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Class",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Main ::= UL_Public UL_Classe UL_Classe_Principale UL_Accolade_Ouvrante UL_Public UL_De_Classe UL_Type_Vide UL_Methode_Principale UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block UL_Accolade_Fermante 
            {
              Object RESULT =null;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG8

			MethodDeclaration methodePrincipale = new MethodDeclaration(new Signature(AtomicType.VoidType, "main", parametres), block, false, true, false);
			//TODO : Décider si on fait "Mainclass" ou ajoute attribut "isMain" à ClassType (peut-être même que l'attribut n'est pas nécessaire)
			List<ClassElement> l = new ArrayList<ClassElement>();
			l.add(methodePrincipale);
			RESULT = new ClassDeclaration("Main", l, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassElements ::= 
            {
              Object RESULT =null;
		//@@CUPDBG9

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassElements ::= AccessRight ClassElement ClassElements 
            {
              Object RESULT =null;
		//@@CUPDBG10

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AccessRight ::= UL_Public 
            {
              Object RESULT =null;
		//@@CUPDBG11

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AccessRight ::= UL_Protege 
            {
              Object RESULT =null;
		//@@CUPDBG12

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AccessRight ::= UL_Prive 
            {
              Object RESULT =null;
		//@@CUPDBG13

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ElementNature ::= UL_De_Classe 
            {
              Object RESULT =null;
		//@@CUPDBG14

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ElementNature ::= 
            {
              Object RESULT =null;
		//@@CUPDBG15

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassElement ::= Attribute 
            {
              Object RESULT =null;
		//@@CUPDBG16

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ClassElement ::= Method 
            {
              Object RESULT =null;
		//@@CUPDBG17

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ClassElement ::= Constructor 
            {
              Object RESULT =null;
		//@@CUPDBG18

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Attribute ::= Type Identifiant UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG19

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new AttributeDeclaration(identifiant.getLeft(), _type, null, false, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Attribute ::= UL_De_Classe Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new AttributeDeclaration(identifiant.getLeft(), _type, valeur, false, true);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Attribute ::= UL_De_Classe UL_Definitif Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG21

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new AttributeDeclaration(identifiant.getLeft(), _type, valeur, true, true);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Method ::= Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22

			RESULT = new MethodDeclaration((Signature) entete,corps, false, false, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Method ::= UL_Definitif Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

			RESULT = new MethodDeclaration((Signature) entete, corps, true, false, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Method ::= UL_De_Classe Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

			RESULT = new MethodDeclaration((Signature) entete,corps, false, true, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Method ::= UL_De_Classe UL_Definitif Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25

			RESULT = new MethodDeclaration((Signature) entete, corps, true, true, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Method ::= UL_Abstrait Signature UL_Point_Virgule 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG26

			RESULT = new MethodDeclaration((Signature) entete, null, false, false, true);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG27

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new Signature(_type,identifiant.getLeft(),parametres);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG28

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new Signature(_type,identifiant.getLeft(),new LinkedList<ParameterDeclaration>());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block 
            {
              Object RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG29

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante Block 
            {
              Object RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG30

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Block ::= UL_Accolade_Ouvrante Instructions UL_Accolade_Fermante 
            {
              Block RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG31
 
				RESULT = new Block( instructions ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Atomique ::= UL_Type_Booleen 
            {
              Type RESULT =null;
		//@@CUPDBG32
 
				RESULT = AtomicType.BooleanType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Atomique ::= UL_Type_Caractere 
            {
              Type RESULT =null;
		//@@CUPDBG33
 
				RESULT = AtomicType.CharacterType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Atomique ::= UL_Type_Chaine 
            {
              Type RESULT =null;
		//@@CUPDBG34
 
				RESULT = AtomicType.StringType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Atomique ::= UL_Type_Entier 
            {
              Type RESULT =null;
		//@@CUPDBG35
 
				RESULT = AtomicType.IntegerType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Atomique ::= UL_Type_Flottant 
            {
              Type RESULT =null;
		//@@CUPDBG36
 
				RESULT = AtomicType.FloatingType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Atomique ::= UL_Type_Vide 
            {
              Type RESULT =null;
		//@@CUPDBG37
 
				RESULT = AtomicType.VoidType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= Atomique 
            {
              Type RESULT =null;
		Location atomiquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location atomiquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type atomique = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 
				RESULT = atomique; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= UL_Identificateur 
            {
              Type RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 
				RESULT = new NamedType( nom ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instructions ::= Instructions Instruction 
            {
              List<Instruction> RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location instructionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instructionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40

					instructions.add( instruction );
					RESULT = instructions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instructions ::= 
            {
              List<Instruction> RESULT =null;
		//@@CUPDBG41
 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Identifiant ::= UL_Identificateur 
            {
              Pair<String,PartialType> RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 
					RESULT = new Pair<String,PartialType>( nom, null ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Identifiant ::= Identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG43

					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parameters ::= Parameters UL_Virgule Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Parameters ::= Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45

					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Declaration ::= Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruction ::= Declaration 
            {
              Instruction RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
 
					RESULT = declaration; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruction ::= Affectable UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG48

					RESULT = new Assignment( affectable, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruction ::= Affectable UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG49

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instruction ::= UL_Afficher Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG50

					RESULT = new Printer( expression );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block UL_Sinon Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block sinon = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 
					RESULT = new Conditional( condition, alors, sinon); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
 
					RESULT = new Conditional( condition, alors); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruction ::= UL_Tant_Que UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
 
					RESULT = new Iteration( condition, corps); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruction ::= UL_Retour Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG54

					RESULT = new Return( expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expressions ::= Expressions UL_Virgule Expression 
            {
              List<Expression> RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55

					expressions.add( expression );
					RESULT = expressions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expressions ::= Expression 
            {
              List<Expression> RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56
 
					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Affectable ::= UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57

					RESULT = new VariableAssignment( nom );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Affectable ::= UL_Moi 
            {
              AssignableExpression RESULT =null;
		//@@CUPDBG58

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Affectable ::= UL_Super 
            {
              AssignableExpression RESULT =null;
		//@@CUPDBG59

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Affectable ::= Affectable UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              AssignableExpression RESULT =null;
		Location tableauxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tableauxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression tableau = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG60

					RESULT = new ArrayAssignment( tableau, indice);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Affectable ::= UL_Parenthese_Ouvrante Affectable UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG61

					RESULT = affectable;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Affectable ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Affectable ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Affectable ::= Affectable UL_Point UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64

					RESULT = new FieldAssignment( enregistrement, etiquette);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Affectable ::= Affectable UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG65

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Affectable ::= Affectable UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG66

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= Expression UL_Double_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= Expression UL_Exclamation_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= Expression UL_Inferieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= Expression UL_Superieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= Expression UL_Inferieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression UL_Superieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG72
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression UL_Double_Barre Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG73
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= Expression UL_Double_Esperluette Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= Expression UL_Plus Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= Expression UL_Moins Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression ::= Expression UL_Asterisque Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression ::= Expression UL_Oblique Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG78
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expression ::= Expression UL_Pour_Cent Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG79
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expression ::= UL_Moins Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80
 
					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expression ::= UL_Point_Exclamation Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG81
 
					RESULT = new UnaryExpression( UnaryOperator.Negate, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expression ::= Expression UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG82

					RESULT = new ArrayAccess( expression, indice );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expression ::= Expression UL_Point UL_Identificateur 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83

					RESULT = new FieldAccess( expression, etiquette );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expression ::= Expression UL_Point_Interrogation Expression UL_Deux_Points Expression 
            {
              Expression RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression alors = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression sinon = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG84

					RESULT = new ConditionalExpression( condition, alors, sinon);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expression ::= UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG85
 
					RESULT = expression; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expression ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG86
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression ::= UL_Identificateur 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88
 
					RESULT = new IdentifierAccess( nom ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression ::= Expression UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location fonctionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fonctionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression fonction = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG89
 

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expression ::= Expression UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location fonctionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fonctionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression fonction = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG90


				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= UL_Nombre_Entier 
            {
              Expression RESULT =null;
		Location entierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location entierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String entier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG91
 
					RESULT = new IntegerValue( entier ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expression ::= UL_Vrai 
            {
              Expression RESULT =null;
		//@@CUPDBG92
 
					RESULT = BooleanValue.True; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expression ::= UL_Faux 
            {
              Expression RESULT =null;
		//@@CUPDBG93
 
					RESULT = BooleanValue.False; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expression ::= UL_Moi 
            {
              Expression RESULT =null;
		//@@CUPDBG94

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expression ::= UL_Super 
            {
              Expression RESULT =null;
		//@@CUPDBG95

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expression ::= UL_Nul 
            {
              Expression RESULT =null;
		//@@CUPDBG96
 
					RESULT = NullValue.Null; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expression ::= UL_Nombre_Flottant 
            {
              Expression RESULT =null;
		Location flottantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flottantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String flottant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG97
 
					RESULT = new FloatingValue( flottant ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expression ::= UL_Caractere 
            {
              Expression RESULT =null;
		Location caracterexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location caracterexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String caractere = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG98
 
					RESULT = new CharacterValue( caractere ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expression ::= UL_Chaine 
            {
              Expression RESULT =null;
		Location chainexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chainexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG99
 
					RESULT = new StringValue( chaine ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= UL_Nouveau Type UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location taillexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location taillexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression taille = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG100
 
					RESULT = new ArrayAllocation( type, taille ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG101
 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG102
 

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
