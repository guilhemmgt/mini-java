
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import java.io.FileOutputStream;
import java.io.PrintStream;
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.util.*;
import fr.n7.stl.tam.ast.Register;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.impl.TAMFactoryImpl;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\024\010\000\002\023\017" +
    "\000\002\026\002\000\002\026\005\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\003\000\002" +
    "\036\002\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\005\000\002\030\010\000\002\030\011" +
    "\000\002\032\004\000\002\032\005\000\002\032\005\000" +
    "\002\032\006\000\002\032\005\000\002\031\007\000\002" +
    "\031\006\000\002\033\007\000\002\033\006\000\002\003" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\016\003\000\002\016\003\000\002\004\004\000\002" +
    "\004\002\000\002\015\003\000\002\015\005\000\002\014" +
    "\006\000\002\014\004\000\002\006\007\000\002\005\003" +
    "\000\002\005\006\000\002\005\004\000\002\005\005\000" +
    "\002\005\011\000\002\005\007\000\002\005\007\000\002" +
    "\005\005\000\002\007\005\000\002\007\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\006" +
    "\000\002\021\005\000\002\021\006\000\002\021\006\000" +
    "\002\021\005\000\002\021\005\000\002\021\006\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\004\000\002\020\006\000\002\020" +
    "\005\000\002\020\007\000\002\020\005\000\002\020\006" +
    "\000\002\020\006\000\002\020\003\000\002\020\006\000" +
    "\002\020\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\007\000\002\020\006\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\006\004\007\012\006\001\002\000\004\002" +
    "\323\001\002\000\002\001\002\000\004\004\007\001\002" +
    "\000\004\102\011\001\002\000\004\002\001\001\002\000" +
    "\002\001\002\000\004\050\013\001\002\000\012\006\014" +
    "\007\017\010\015\051\ufffb\001\002\000\026\011\ufff9\012" +
    "\ufff9\013\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\001\002\000\026\011\ufff8\012\ufff8\013" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8" +
    "\102\ufff8\001\002\000\026\011\036\012\027\013\034\074" +
    "\037\075\035\076\041\077\032\100\031\101\033\102\030" +
    "\001\002\000\026\011\ufff7\012\ufff7\013\ufff7\074\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\001\002" +
    "\000\004\051\021\001\002\000\002\001\002\000\012\006" +
    "\014\007\017\010\015\051\ufffb\001\002\000\004\102\224" +
    "\001\002\000\012\006\ufff4\007\ufff4\010\ufff4\051\ufff4\001" +
    "\002\000\012\006\ufff3\007\ufff3\010\ufff3\051\ufff3\001\002" +
    "\000\004\050\047\001\002\000\020\074\037\075\035\076" +
    "\041\077\032\100\031\101\033\102\045\001\002\000\006" +
    "\044\304\102\uffdd\001\002\000\012\044\uffe0\045\uffe0\052" +
    "\uffe0\102\uffe0\001\002\000\012\044\uffe1\045\uffe1\052\uffe1" +
    "\102\uffe1\001\002\000\012\044\uffdf\045\uffdf\052\uffdf\102" +
    "\uffdf\001\002\000\022\011\267\074\037\075\035\076\041" +
    "\077\032\100\031\101\033\102\045\001\002\000\012\044" +
    "\uffe3\045\uffe3\052\uffe3\102\uffe3\001\002\000\020\074\037" +
    "\075\035\076\041\077\032\100\031\101\033\102\045\001" +
    "\002\000\012\044\uffe4\045\uffe4\052\uffe4\102\uffe4\001\002" +
    "\000\012\006\ufff2\007\ufff2\010\ufff2\051\ufff2\001\002\000" +
    "\012\044\uffe2\045\uffe2\052\uffe2\102\uffe2\001\002\000\010" +
    "\044\uffde\052\uffde\102\uffde\001\002\000\004\102\224\001" +
    "\002\000\004\050\047\001\002\000\010\044\uffdd\052\uffdd" +
    "\102\uffdd\001\002\000\012\006\uffed\007\uffed\010\uffed\051" +
    "\uffed\001\002\000\040\016\uffdb\017\uffdb\044\uffdb\051\uffdb" +
    "\062\uffdb\064\uffdb\066\uffdb\067\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\001\002\000\040" +
    "\016\062\017\053\044\055\051\063\062\056\064\065\066" +
    "\064\067\052\074\037\075\035\076\041\077\032\100\031" +
    "\101\033\102\057\001\002\000\040\016\uffdc\017\uffdc\044" +
    "\uffdc\051\uffdc\062\uffdc\064\uffdc\066\uffdc\067\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\001" +
    "\002\000\036\016\074\017\102\025\070\034\105\044\104" +
    "\065\076\102\077\103\067\104\101\105\103\106\075\107" +
    "\073\110\072\111\071\001\002\000\016\020\uffc9\022\uffc9" +
    "\026\uffc9\044\uffc9\045\uffc9\052\uffc9\001\002\000\040\016" +
    "\uffd5\017\uffd5\044\uffd5\051\uffd5\062\uffd5\064\uffd5\066\uffd5" +
    "\067\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\102\uffd5\001\002\000\026\016\062\017\053\044\055" +
    "\074\037\075\035\076\041\077\032\100\031\101\033\102" +
    "\240\001\002\000\004\044\232\001\002\000\016\020\uffcb" +
    "\022\uffcb\026\uffcb\044\uffcb\052\uffcb\102\uffdd\001\002\000" +
    "\004\102\224\001\002\000\014\020\207\022\212\026\206" +
    "\044\211\052\210\001\002\000\016\020\uffca\022\uffca\026" +
    "\uffca\044\uffca\045\uffca\052\uffca\001\002\000\050\006\uffe5" +
    "\007\uffe5\010\uffe5\016\uffe5\017\uffe5\044\uffe5\051\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\066\uffe5\067\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\001\002\000" +
    "\036\016\074\017\102\025\070\034\105\044\104\065\076" +
    "\102\077\103\067\104\101\105\103\106\075\107\073\110" +
    "\072\111\071\001\002\000\004\044\066\001\002\000\036" +
    "\016\074\017\102\025\070\034\105\044\104\065\076\102" +
    "\077\103\067\104\101\105\103\106\075\107\073\110\072" +
    "\111\071\001\002\000\056\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\033\uffa1\034\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\001\002" +
    "\000\036\016\074\017\102\025\070\034\105\044\104\065" +
    "\076\102\077\103\067\104\101\105\103\106\075\107\073" +
    "\110\072\111\071\001\002\000\056\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\033\uffa7\034\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\001\002\000\056\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\040\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\001\002\000\056" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\033\uffa4\034" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\001\002\000\056\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\033\uffa6\034\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\001\002\000\056\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\033\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\001\002\000" +
    "\020\074\037\075\035\076\041\077\032\100\031\101\033" +
    "\102\045\001\002\000\056\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\033\uffac\034\uffac\036\uffac\037\uffac\040\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\001\002" +
    "\000\046\022\120\024\124\033\111\034\125\036\122\037" +
    "\114\040\115\042\107\043\110\044\126\045\171\052\113" +
    "\054\117\055\127\056\121\057\123\060\112\061\116\001" +
    "\002\000\056\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\033\uffa2\034\uffa2\036\uffa2\037\uffa2\040\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\060\uffa2\061\uffa2\001\002\000\056\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\033\uffa5\034\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\001\002\000\056\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\001\002\000\052\016\074\017\102\025\070\034\105\044" +
    "\104\065\076\074\037\075\035\076\041\077\032\100\031" +
    "\101\033\102\161\103\067\104\101\105\103\106\075\107" +
    "\073\110\072\111\071\001\002\000\036\016\074\017\102" +
    "\025\070\034\105\044\104\065\076\102\077\103\067\104" +
    "\101\105\103\106\075\107\073\110\072\111\071\001\002" +
    "\000\056\020\uffb4\021\uffb4\022\120\023\uffb4\024\uffb4\033" +
    "\uffb4\034\uffb4\036\122\037\114\040\115\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000\036\016\074" +
    "\017\102\025\070\034\105\044\104\065\076\102\077\103" +
    "\067\104\101\105\103\106\075\107\073\110\072\111\071" +
    "\001\002\000\036\016\074\017\102\025\070\034\105\044" +
    "\104\065\076\102\077\103\067\104\101\105\103\106\075" +
    "\107\073\110\072\111\071\001\002\000\036\016\074\017" +
    "\102\025\070\034\105\044\104\065\076\102\077\103\067" +
    "\104\101\105\103\106\075\107\073\110\072\111\071\001" +
    "\002\000\036\016\074\017\102\025\070\034\105\044\104" +
    "\065\076\102\077\103\067\104\101\105\103\106\075\107" +
    "\073\110\072\111\071\001\002\000\036\016\074\017\102" +
    "\025\070\034\105\044\104\065\076\102\077\103\067\104" +
    "\101\105\103\106\075\107\073\110\072\111\071\001\002" +
    "\000\036\016\074\017\102\025\070\034\105\044\104\065" +
    "\076\102\077\103\067\104\101\105\103\106\075\107\073" +
    "\110\072\111\071\001\002\000\036\016\074\017\102\025" +
    "\070\034\105\044\104\065\076\102\077\103\067\104\101" +
    "\105\103\106\075\107\073\110\072\111\071\001\002\000" +
    "\036\016\074\017\102\025\070\034\105\044\104\065\076" +
    "\102\077\103\067\104\101\105\103\106\075\107\073\110" +
    "\072\111\071\001\002\000\036\016\074\017\102\025\070" +
    "\034\105\044\104\065\076\102\077\103\067\104\101\105" +
    "\103\106\075\107\073\110\072\111\071\001\002\000\004" +
    "\102\146\001\002\000\036\016\074\017\102\025\070\034" +
    "\105\044\104\065\076\102\077\103\067\104\101\105\103" +
    "\106\075\107\073\110\072\111\071\001\002\000\036\016" +
    "\074\017\102\025\070\034\105\044\104\065\076\102\077" +
    "\103\067\104\101\105\103\106\075\107\073\110\072\111" +
    "\071\001\002\000\036\016\074\017\102\025\070\034\105" +
    "\044\104\065\076\102\077\103\067\104\101\105\103\106" +
    "\075\107\073\110\072\111\071\001\002\000\036\016\074" +
    "\017\102\025\070\034\105\044\104\065\076\102\077\103" +
    "\067\104\101\105\103\106\075\107\073\110\072\111\071" +
    "\001\002\000\036\016\074\017\102\025\070\034\105\044" +
    "\104\065\076\102\077\103\067\104\101\105\103\106\075" +
    "\107\073\110\072\111\071\001\002\000\040\016\074\017" +
    "\102\025\070\034\105\044\104\045\131\065\076\102\077" +
    "\103\067\104\101\105\103\106\075\107\073\110\072\111" +
    "\071\001\002\000\036\016\074\017\102\025\070\034\105" +
    "\044\104\065\076\102\077\103\067\104\101\105\103\106" +
    "\075\107\073\110\072\111\071\001\002\000\046\020\uffbe" +
    "\021\uffbe\022\120\023\uffbe\024\uffbe\033\111\034\125\036" +
    "\122\037\114\040\115\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\052\uffbe\053\uffbe\060\uffbe\061\uffbe\001\002\000\056\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\033\uffaa\034\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\001\002\000\050\021\uffcc\022\120\024" +
    "\124\033\111\034\125\036\122\037\114\040\115\042\107" +
    "\043\110\044\126\045\uffcc\052\113\054\117\055\127\056" +
    "\121\057\123\060\112\061\116\001\002\000\006\021\134" +
    "\045\135\001\002\000\036\016\074\017\102\025\070\034" +
    "\105\044\104\065\076\102\077\103\067\104\101\105\103" +
    "\106\075\107\073\110\072\111\071\001\002\000\056\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\033\uffab\034\uffab" +
    "\036\uffab\037\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\061\uffab\001\002\000\050\021\uffcd\022\120\024" +
    "\124\033\111\034\125\036\122\037\114\040\115\042\107" +
    "\043\110\044\126\045\uffcd\052\113\054\117\055\127\056" +
    "\121\057\123\060\112\061\116\001\002\000\056\020\uffb8" +
    "\021\uffb8\022\120\023\uffb8\024\uffb8\033\uffb8\034\uffb8\036" +
    "\122\037\114\040\115\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\001\002\000\046\022\120\023\141\024\124" +
    "\033\111\034\125\036\122\037\114\040\115\042\107\043" +
    "\110\044\126\052\113\054\117\055\127\056\121\057\123" +
    "\060\112\061\116\001\002\000\036\016\074\017\102\025" +
    "\070\034\105\044\104\065\076\102\077\103\067\104\101" +
    "\105\103\106\075\107\073\110\072\111\071\001\002\000" +
    "\054\020\uffb0\021\uffb0\022\120\023\uffb0\033\111\034\125" +
    "\036\122\037\114\040\115\042\107\043\110\044\uffb0\045" +
    "\uffb0\052\uffb0\053\uffb0\054\117\055\127\056\121\057\123" +
    "\060\112\061\116\001\002\000\046\020\uffbc\021\uffbc\022" +
    "\120\023\uffbc\024\uffbc\033\111\034\125\036\122\037\114" +
    "\040\115\042\uffbc\043\uffbc\044\uffbc\045\uffbc\052\uffbc\053" +
    "\uffbc\060\uffbc\061\uffbc\001\002\000\056\020\uffb7\021\uffb7" +
    "\022\120\023\uffb7\024\uffb7\033\uffb7\034\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\001\002\000\046\020\uffbd\021\uffbd\022\120\023\uffbd" +
    "\024\uffbd\033\111\034\125\036\122\037\114\040\115\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\052\uffbd\053\uffbd\060\uffbd" +
    "\061\uffbd\001\002\000\056\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002" +
    "\000\046\020\uffbf\021\uffbf\022\120\023\uffbf\024\uffbf\033" +
    "\111\034\125\036\122\037\114\040\115\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\052\uffbf\053\uffbf\060\uffbf\061\uffbf\001" +
    "\002\000\052\020\uffc0\021\uffc0\022\120\023\uffc0\024\uffc0" +
    "\033\111\034\125\036\122\037\114\040\115\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\052\uffc0\053\uffc0\054\117\055\127" +
    "\056\121\057\123\001\002\000\056\020\uffb5\021\uffb5\022" +
    "\120\023\uffb5\024\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\001\002\000\056\020\uffb6\021\uffb6\022\120\023\uffb6\024" +
    "\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000\046" +
    "\022\120\024\124\033\111\034\125\036\122\037\114\040" +
    "\115\042\107\043\110\044\126\052\113\053\154\054\117" +
    "\055\127\056\121\057\123\060\112\061\116\001\002\000" +
    "\056\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\033\uffb2" +
    "\034\uffb2\036\uffb2\037\uffb2\040\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\001\002\000\052\020\uffc1\021" +
    "\uffc1\022\120\023\uffc1\024\uffc1\033\111\034\125\036\122" +
    "\037\114\040\115\042\uffc1\043\uffc1\044\uffc1\045\uffc1\052" +
    "\uffc1\053\uffc1\054\117\055\127\056\121\057\123\001\002" +
    "\000\056\020\uffb9\021\uffb9\022\120\023\uffb9\024\uffb9\033" +
    "\uffb9\034\uffb9\036\122\037\114\040\115\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\001\002\000\056\020\uffba" +
    "\021\uffba\022\120\023\uffba\024\uffba\033\111\034\125\036" +
    "\122\037\114\040\115\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\052\uffba\053\uffba\054\117\055\127\056\121\057\123\060" +
    "\112\061\116\001\002\000\056\020\uffbb\021\uffbb\022\120" +
    "\023\uffbb\024\uffbb\033\111\034\125\036\122\037\114\040" +
    "\115\042\uffbb\043\110\044\uffbb\045\uffbb\052\uffbb\053\uffbb" +
    "\054\117\055\127\056\121\057\123\060\112\061\116\001" +
    "\002\000\046\022\uffac\024\uffac\033\uffac\034\uffac\036\uffac" +
    "\037\uffac\040\uffac\042\uffac\043\uffac\044\uffac\045\167\052" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\001\002\000\004\045\165\001\002\000\046\022\120\024" +
    "\124\033\111\034\125\036\122\037\114\040\115\042\107" +
    "\043\110\044\126\045\164\052\113\054\117\055\127\056" +
    "\121\057\123\060\112\061\116\001\002\000\056\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\033\uffaf\034\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\001\002\000\036\016\074\017\102\025\070" +
    "\034\105\044\104\065\076\102\077\103\067\104\101\105" +
    "\103\106\075\107\073\110\072\111\071\001\002\000\056" +
    "\020\uffad\021\uffad\022\120\023\uffad\024\124\033\111\034" +
    "\125\036\122\037\114\040\115\042\107\043\110\044\uffad" +
    "\045\uffad\052\uffad\053\uffad\054\117\055\127\056\121\057" +
    "\123\060\112\061\116\001\002\000\036\016\074\017\102" +
    "\025\070\034\105\044\104\065\076\102\077\103\067\104" +
    "\101\105\103\106\075\107\073\110\072\111\071\001\002" +
    "\000\056\020\uffae\021\uffae\022\120\023\uffae\024\124\033" +
    "\111\034\125\036\122\037\114\040\115\042\107\043\110" +
    "\044\uffae\045\uffae\052\uffae\053\uffae\054\117\055\127\056" +
    "\121\057\123\060\112\061\116\001\002\000\004\050\047" +
    "\001\002\000\040\016\uffcf\017\uffcf\044\uffcf\051\uffcf\062" +
    "\uffcf\064\uffcf\066\uffcf\067\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\001\002\000\006\044" +
    "\175\052\174\001\002\000\036\016\074\017\102\025\070" +
    "\034\105\044\104\065\076\102\077\103\067\104\101\105" +
    "\103\106\075\107\073\110\072\111\071\001\002\000\040" +
    "\016\074\017\102\025\070\034\105\044\104\045\176\065" +
    "\076\102\077\103\067\104\101\105\103\106\075\107\073" +
    "\110\072\111\071\001\002\000\056\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\033\uff9f\034\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\001\002\000\006\021\134\045\200\001\002\000\056\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\033\uff9e\034\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\001\002\000\046\022\120\024\124\033" +
    "\111\034\125\036\122\037\114\040\115\042\107\043\110" +
    "\044\126\052\113\053\202\054\117\055\127\056\121\057" +
    "\123\060\112\061\116\001\002\000\056\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\033\uffa0\034\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\001\002\000\056\020\uffb3\021\uffb3\022\120\023\uffb3" +
    "\024\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002\000" +
    "\046\020\205\022\120\024\124\033\111\034\125\036\122" +
    "\037\114\040\115\042\107\043\110\044\126\052\113\054" +
    "\117\055\127\056\121\057\123\060\112\061\116\001\002" +
    "\000\040\016\uffd2\017\uffd2\044\uffd2\051\uffd2\062\uffd2\064" +
    "\uffd2\066\uffd2\067\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\001\002\000\036\016\074\017" +
    "\102\025\070\034\105\044\104\065\076\102\077\103\067" +
    "\104\101\105\103\106\075\107\073\110\072\111\071\001" +
    "\002\000\040\016\uffd3\017\uffd3\044\uffd3\051\uffd3\062\uffd3" +
    "\064\uffd3\066\uffd3\067\uffd3\074\uffd3\075\uffd3\076\uffd3\077" +
    "\uffd3\100\uffd3\101\uffd3\102\uffd3\001\002\000\036\016\074" +
    "\017\102\025\070\034\105\044\104\065\076\102\077\103" +
    "\067\104\101\105\103\106\075\107\073\110\072\111\071" +
    "\001\002\000\040\016\074\017\102\025\070\034\105\044" +
    "\104\045\214\065\076\102\077\103\067\104\101\105\103" +
    "\106\075\107\073\110\072\111\071\001\002\000\004\102" +
    "\213\001\002\000\016\020\uffc4\022\uffc4\026\uffc4\044\uffc4" +
    "\045\uffc4\052\uffc4\001\002\000\016\020\uffc3\022\uffc3\026" +
    "\uffc3\044\uffc3\045\uffc3\052\uffc3\001\002\000\006\021\134" +
    "\045\216\001\002\000\016\020\uffc2\022\uffc2\026\uffc2\044" +
    "\uffc2\045\uffc2\052\uffc2\001\002\000\046\022\120\024\124" +
    "\033\111\034\125\036\122\037\114\040\115\042\107\043" +
    "\110\044\126\052\113\053\220\054\117\055\127\056\121" +
    "\057\123\060\112\061\116\001\002\000\016\020\uffc8\022" +
    "\uffc8\026\uffc8\044\uffc8\045\uffc8\052\uffc8\001\002\000\046" +
    "\020\222\022\120\024\124\033\111\034\125\036\122\037" +
    "\114\040\115\042\107\043\110\044\126\052\113\054\117" +
    "\055\127\056\121\057\123\060\112\061\116\001\002\000" +
    "\040\016\uffd4\017\uffd4\044\uffd4\051\uffd4\062\uffd4\064\uffd4" +
    "\066\uffd4\067\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\001\002\000\006\026\225\052\226" +
    "\001\002\000\016\020\uffda\021\uffda\026\uffda\044\uffda\045" +
    "\uffda\052\uffda\001\002\000\036\016\074\017\102\025\070" +
    "\034\105\044\104\065\076\102\077\103\067\104\101\105" +
    "\103\106\075\107\073\110\072\111\071\001\002\000\004" +
    "\053\227\001\002\000\016\020\uffd9\021\uffd9\026\uffd9\044" +
    "\uffd9\045\uffd9\052\uffd9\001\002\000\046\020\231\022\120" +
    "\024\124\033\111\034\125\036\122\037\114\040\115\042" +
    "\107\043\110\044\126\052\113\054\117\055\127\056\121" +
    "\057\123\060\112\061\116\001\002\000\040\016\uffd6\017" +
    "\uffd6\044\uffd6\051\uffd6\062\uffd6\064\uffd6\066\uffd6\067\uffd6" +
    "\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102" +
    "\uffd6\001\002\000\036\016\074\017\102\025\070\034\105" +
    "\044\104\065\076\102\077\103\067\104\101\105\103\106" +
    "\075\107\073\110\072\111\071\001\002\000\046\022\120" +
    "\024\124\033\111\034\125\036\122\037\114\040\115\042" +
    "\107\043\110\044\126\045\234\052\113\054\117\055\127" +
    "\056\121\057\123\060\112\061\116\001\002\000\004\050" +
    "\047\001\002\000\042\016\uffd0\017\uffd0\044\uffd0\051\uffd0" +
    "\062\uffd0\063\236\064\uffd0\066\uffd0\067\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\001\002" +
    "\000\004\050\047\001\002\000\040\016\uffd1\017\uffd1\044" +
    "\uffd1\051\uffd1\062\uffd1\064\uffd1\066\uffd1\067\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\001" +
    "\002\000\012\022\uffcb\044\uffcb\045\247\052\uffcb\001\002" +
    "\000\012\022\212\044\211\045\246\052\210\001\002\000" +
    "\004\045\243\001\002\000\012\016\062\017\053\044\055" +
    "\102\244\001\002\000\016\020\uffcb\022\uffcb\026\uffcb\044" +
    "\uffcb\045\uffcb\052\uffcb\001\002\000\016\020\uffc5\022\212" +
    "\026\uffc5\044\uffc5\045\uffc5\052\uffc5\001\002\000\016\020" +
    "\uffc7\022\uffc7\026\uffc7\044\uffc7\045\uffc7\052\uffc7\001\002" +
    "\000\012\016\062\017\053\044\055\102\244\001\002\000" +
    "\016\020\uffc6\022\212\026\uffc6\044\uffc6\045\uffc6\052\uffc6" +
    "\001\002\000\046\020\252\022\120\024\124\033\111\034" +
    "\125\036\122\037\114\040\115\042\107\043\110\044\126" +
    "\052\113\054\117\055\127\056\121\057\123\060\112\061" +
    "\116\001\002\000\040\016\uffce\017\uffce\044\uffce\051\uffce" +
    "\062\uffce\064\uffce\066\uffce\067\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\001\002\000\006" +
    "\044\254\052\226\001\002\000\022\045\256\074\037\075" +
    "\035\076\041\077\032\100\031\101\033\102\045\001\002" +
    "\000\004\102\224\001\002\000\006\020\uffe8\050\uffe8\001" +
    "\002\000\006\021\260\045\261\001\002\000\020\074\037" +
    "\075\035\076\041\077\032\100\031\101\033\102\045\001" +
    "\002\000\006\020\uffe9\050\uffe9\001\002\000\004\102\224" +
    "\001\002\000\010\021\uffd8\045\uffd8\052\226\001\002\000" +
    "\010\021\uffd7\045\uffd7\052\226\001\002\000\004\102\224" +
    "\001\002\000\004\050\047\001\002\000\020\074\037\075" +
    "\035\076\041\077\032\100\031\101\033\102\045\001\002" +
    "\000\004\102\224\001\002\000\004\050\047\001\002\000" +
    "\012\006\uffeb\007\uffeb\010\uffeb\051\uffeb\001\002\000\010" +
    "\026\274\044\254\052\226\001\002\000\036\016\074\017" +
    "\102\025\070\034\105\044\104\065\076\102\077\103\067" +
    "\104\101\105\103\106\075\107\073\110\072\111\071\001" +
    "\002\000\046\020\276\022\120\024\124\033\111\034\125" +
    "\036\122\037\114\040\115\042\107\043\110\044\126\052" +
    "\113\054\117\055\127\056\121\057\123\060\112\061\116" +
    "\001\002\000\012\006\uffef\007\uffef\010\uffef\051\uffef\001" +
    "\002\000\012\006\uffec\007\uffec\010\uffec\051\uffec\001\002" +
    "\000\010\026\301\044\254\052\226\001\002\000\036\016" +
    "\074\017\102\025\070\034\105\044\104\065\076\102\077" +
    "\103\067\104\101\105\103\106\075\107\073\110\072\111" +
    "\071\001\002\000\046\020\303\022\120\024\124\033\111" +
    "\034\125\036\122\037\114\040\115\042\107\043\110\044" +
    "\126\052\113\054\117\055\127\056\121\057\123\060\112" +
    "\061\116\001\002\000\012\006\ufff0\007\ufff0\010\ufff0\051" +
    "\ufff0\001\002\000\022\045\305\074\037\075\035\076\041" +
    "\077\032\100\031\101\033\102\045\001\002\000\004\050" +
    "\047\001\002\000\006\021\260\045\307\001\002\000\004" +
    "\050\047\001\002\000\012\006\uffe7\007\uffe7\010\uffe7\051" +
    "\uffe7\001\002\000\012\006\uffe6\007\uffe6\010\uffe6\051\uffe6" +
    "\001\002\000\004\020\313\001\002\000\012\006\uffea\007" +
    "\uffea\010\uffea\051\uffea\001\002\000\012\006\uffee\007\uffee" +
    "\010\uffee\051\uffee\001\002\000\010\020\316\044\254\052" +
    "\226\001\002\000\012\006\ufff1\007\ufff1\010\ufff1\051\ufff1" +
    "\001\002\000\004\051\ufffa\001\002\000\002\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\010\002\003\022\007\024\004\001\001\000" +
    "\002\001\001\000\004\022\321\001\001\000\004\024\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\011\001\001\000\002\001\001\000\006\026\017\035\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\022\017\041\027\021\030\023\031\025\032\024\033\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\316\035\015\001\001\000\004\015\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\313\001\001\000\010\016\042\017\041\031\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\264\017\041\031\265\001\001" +
    "\000\002\001\001\000\010\016\042\017\041\031\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\252\001\001\000\004\003" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\047\001\001\000\014\005\050\006\053\016\057\017" +
    "\041\021\060\001\001\000\002\001\001\000\004\020\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\241\021\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\203\001\001\000\002" +
    "\001\001\000\004\020\077\001\001\000\002\001\001\000" +
    "\004\020\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\172\017\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\161\020\162\001\001\000\004\020\105" +
    "\001\001\000\002\001\001\000\004\020\157\001\001\000" +
    "\004\020\156\001\001\000\004\020\155\001\001\000\004" +
    "\020\154\001\001\000\004\020\152\001\001\000\004\020" +
    "\151\001\001\000\004\020\150\001\001\000\004\020\147" +
    "\001\001\000\004\020\146\001\001\000\002\001\001\000" +
    "\004\020\144\001\001\000\004\020\143\001\001\000\004" +
    "\020\142\001\001\000\004\020\137\001\001\000\004\020" +
    "\136\001\001\000\006\007\132\020\131\001\001\000\004" +
    "\020\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\165\001\001" +
    "\000\002\001\001\000\004\020\167\001\001\000\002\001" +
    "\001\000\004\003\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\200\001\001\000\006\007\176\020" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\220" +
    "\001\001\000\002\001\001\000\004\020\216\001\001\000" +
    "\006\007\214\020\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\232\001" +
    "\001\000\002\001\001\000\004\003\234\001\001\000\002" +
    "\001\001\000\004\003\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\256\016\254\017\041\001\001\000\004\015\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\261\017\041\001\001\000\002\001\001\000\004\015\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\277\001\001\000\004\003\276\001\001\000\010\016\267" +
    "\017\041\031\270\001\001\000\004\015\272\001\001\000" +
    "\004\003\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\305\016\254\017\041\001\001\000\004\003\310\001\001" +
    "\000\002\001\001\000\004\003\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.name);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

	protected Lexer lexer;
	protected String name;
	public Parser(String _name) {
		this();
		this.name = _name;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Elements 
            {
              Block RESULT =null;
		Location elementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object elements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 
				SymbolTable tds = new SymbolTable();
				TAMFactoryImpl tamFactory = new TAMFactoryImpl();
				Fragment code = tamFactory.createFragment();

				boolean collect_succeeded = true;

				for (ClassDeclaration elem : elements) {
					//if (collect_succeeded && elem.collect(tds)) {
						//Prochaines étapes
					}
					//else {
					//	System.out.println("collect failed");
					//}
			}
		;

Elements ::= Main
		{:
			//RESULT = main;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Class Elements 
            {
              Block RESULT =null;
		//@@CUPDBG4

			//RESULT = classe;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= UL_Abstrait Class Elements 
            {
              Block RESULT =null;
		//@@CUPDBG5

			//RESULT = classe;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Class ::= UL_Classe UL_Identificateur SingleInherits UL_Accolade_Ouvrante ClassElements UL_Accolade_Fermante 
            {
              Object RESULT =null;
		Location classElementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location classElementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object classElements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG6

			RESULT = new ClassDeclaration(classElements);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Class",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Main ::= UL_Public UL_Classe UL_Classe_Principale UL_Accolade_Ouvrante UL_Public UL_De_Classe UL_Type_Vide UL_Methode_Principale UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block UL_Accolade_Fermante 
            {
              Object RESULT =null;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG7

			MethodDeclaration methodePrincipale = new MethodDeclaration(new Signature(AtomicType.VoidType, "main", parametres), block, false, true, false);
			//TODO : Décider si on fait "Mainclass" ou ajoute attribut "isMain" à ClassType (peut-être même que l'attribut n'est pas nécessaire)
			List<ClassElement> l = new ArrayList<ClassElement>();
			l.add(methodePrincipale);
			RESULT = new ClassDeclaration("Main", l, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassElements ::= 
            {
              Object RESULT =null;
		//@@CUPDBG8

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassElements ::= AccessRight ClassElement ClassElements 
            {
              Object RESULT =null;
		//@@CUPDBG9

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElements",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AccessRight ::= UL_Public 
            {
              Object RESULT =null;
		//@@CUPDBG10

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AccessRight ::= UL_Protege 
            {
              Object RESULT =null;
		//@@CUPDBG11

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AccessRight ::= UL_Prive 
            {
              Object RESULT =null;
		//@@CUPDBG12

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessRight",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ElementNature ::= UL_De_Classe 
            {
              Object RESULT =null;
		//@@CUPDBG13

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ElementNature ::= 
            {
              Object RESULT =null;
		//@@CUPDBG14

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementNature",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassElement ::= Attribute 
            {
              Object RESULT =null;
		//@@CUPDBG15

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassElement ::= Method 
            {
              Object RESULT =null;
		//@@CUPDBG16

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ClassElement ::= Constructor 
            {
              Object RESULT =null;
		//@@CUPDBG17

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassElement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Attribute ::= Type Identifiant UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG18

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new AttributeDeclaration(identifiant.getLeft(), _type, null, false, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Attribute ::= UL_De_Classe Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG19

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new AttributeDeclaration(identifiant.getLeft(), _type, valeur, false, true);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Attribute ::= UL_De_Classe UL_Definitif Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new AttributeDeclaration(identifiant.getLeft(), _type, valeur, true, true);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Attribute",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Method ::= Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21

			RESULT = new MethodDeclaration((Signature) entete,corps, false, false, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Method ::= UL_Definitif Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22

			RESULT = new MethodDeclaration((Signature) entete, corps, true, false, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Method ::= UL_De_Classe Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

			RESULT = new MethodDeclaration((Signature) entete,corps, false, true, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Method ::= UL_De_Classe UL_Definitif Signature Block 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

			RESULT = new MethodDeclaration((Signature) entete, corps, true, true, false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Method ::= UL_Abstrait Signature UL_Point_Virgule 
            {
              Object RESULT =null;
		Location entetexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location entetexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object entete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG25

			RESULT = new MethodDeclaration((Signature) entete, null, false, false, true);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG26

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new Signature(_type,identifiant.getLeft(),parametres);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Signature ::= Type Identifiant UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Object RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG27

			Type _type = identifiant.getRight();
				if (_type == null) {
					_type = type;
				} else {
					_type = ((PartialType)_type).complete( type );
 				}
			RESULT = new Signature(_type,identifiant.getLeft(),new LinkedList<ParameterDeclaration>());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Block 
            {
              Object RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parametres = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG28

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Constructor ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante Block 
            {
              Object RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG29

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constructor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Block ::= UL_Accolade_Ouvrante Instructions UL_Accolade_Fermante 
            {
              Block RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG30
 
				RESULT = new Block( instructions ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Atomique ::= UL_Type_Booleen 
            {
              Type RESULT =null;
		//@@CUPDBG31
 
				RESULT = AtomicType.BooleanType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Atomique ::= UL_Type_Caractere 
            {
              Type RESULT =null;
		//@@CUPDBG32
 
				RESULT = AtomicType.CharacterType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Atomique ::= UL_Type_Chaine 
            {
              Type RESULT =null;
		//@@CUPDBG33
 
				RESULT = AtomicType.StringType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Atomique ::= UL_Type_Entier 
            {
              Type RESULT =null;
		//@@CUPDBG34
 
				RESULT = AtomicType.IntegerType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Atomique ::= UL_Type_Flottant 
            {
              Type RESULT =null;
		//@@CUPDBG35
 
				RESULT = AtomicType.FloatingType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Atomique ::= UL_Type_Vide 
            {
              Type RESULT =null;
		//@@CUPDBG36
 
				RESULT = AtomicType.VoidType; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= Atomique 
            {
              Type RESULT =null;
		Location atomiquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location atomiquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type atomique = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 
				RESULT = atomique; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= UL_Identificateur 
            {
              Type RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 
				RESULT = new NamedType( nom ); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instructions ::= Instructions Instruction 
            {
              List<Instruction> RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location instructionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instructionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39

					instructions.add( instruction );
					RESULT = instructions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instructions ::= 
            {
              List<Instruction> RESULT =null;
		//@@CUPDBG40
 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Identifiant ::= UL_Identificateur 
            {
              Pair<String,PartialType> RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 
					RESULT = new Pair<String,PartialType>( nom, null ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Identifiant ::= Identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG42

					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Parameters ::= Parameters UL_Virgule Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parameters ::= Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44

					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Declaration ::= Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG45

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruction ::= Declaration 
            {
              Instruction RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
 
					RESULT = declaration; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruction ::= Affectable UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG47

					RESULT = new Assignment( affectable, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruction ::= Affectable UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG48

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruction ::= UL_Afficher Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG49

					RESULT = new Printer( expression );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block UL_Sinon Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block sinon = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 
					RESULT = new Conditional( condition, alors, sinon); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 
					RESULT = new Conditional( condition, alors); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instruction ::= UL_Tant_Que UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Block 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
 
					RESULT = new Iteration( condition, corps); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instruction ::= UL_Retour Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG53

					RESULT = new Return( expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expressions ::= Expressions UL_Virgule Expression 
            {
              List<Expression> RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54

					expressions.add( expression );
					RESULT = expressions; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expressions ::= Expression 
            {
              List<Expression> RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
 
					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Affectable ::= UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56

					RESULT = new VariableAssignment( nom );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Affectable ::= UL_Moi 
            {
              AssignableExpression RESULT =null;
		//@@CUPDBG57

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Affectable ::= UL_Super 
            {
              AssignableExpression RESULT =null;
		//@@CUPDBG58

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Affectable ::= Affectable UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              AssignableExpression RESULT =null;
		Location tableauxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tableauxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression tableau = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG59

					RESULT = new ArrayAssignment( tableau, indice);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Affectable ::= UL_Parenthese_Ouvrante Affectable UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG60

					RESULT = affectable;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Affectable ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Affectable ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Affectable 
            {
              AssignableExpression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
 
					RESULT = new AssignableConversion( affectable, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Affectable ::= Affectable UL_Point UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63

					RESULT = new FieldAssignment( enregistrement, etiquette);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Affectable ::= Affectable UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG64

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Affectable ::= Affectable UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG65

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= Expression UL_Double_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= Expression UL_Exclamation_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= Expression UL_Inferieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= Expression UL_Superieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= Expression UL_Inferieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= Expression UL_Superieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression UL_Double_Barre Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG72
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression UL_Double_Esperluette Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG73
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= Expression UL_Plus Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= Expression UL_Moins Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= Expression UL_Asterisque Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression ::= Expression UL_Oblique Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression ::= Expression UL_Pour_Cent Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG78
 
					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expression ::= UL_Moins Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG79
 
					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expression ::= UL_Point_Exclamation Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80
 
					RESULT = new UnaryExpression( UnaryOperator.Negate, expression); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expression ::= Expression UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG81

					RESULT = new ArrayAccess( expression, indice );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expression ::= Expression UL_Point UL_Identificateur 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG82

					RESULT = new FieldAccess( expression, etiquette );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expression ::= Expression UL_Point_Interrogation Expression UL_Deux_Points Expression 
            {
              Expression RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression alors = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression sinon = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83

					RESULT = new ConditionalExpression( condition, alors, sinon);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expression ::= UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG84
 
					RESULT = expression; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expression ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG85
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expression ::= UL_Parenthese_Ouvrante Atomique UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG86
 
					RESULT = new AccessibleConversion( expression, type); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression ::= UL_Identificateur 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87
 
					RESULT = new IdentifierAccess( nom ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression ::= Expression UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location fonctionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fonctionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression fonction = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG88
 

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression ::= Expression UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location fonctionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fonctionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression fonction = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG89


				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expression ::= UL_Nombre_Entier 
            {
              Expression RESULT =null;
		Location entierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location entierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String entier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG90
 
					RESULT = new IntegerValue( entier ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= UL_Vrai 
            {
              Expression RESULT =null;
		//@@CUPDBG91
 
					RESULT = BooleanValue.True; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expression ::= UL_Faux 
            {
              Expression RESULT =null;
		//@@CUPDBG92
 
					RESULT = BooleanValue.False; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expression ::= UL_Moi 
            {
              Expression RESULT =null;
		//@@CUPDBG93

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expression ::= UL_Super 
            {
              Expression RESULT =null;
		//@@CUPDBG94

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expression ::= UL_Nul 
            {
              Expression RESULT =null;
		//@@CUPDBG95
 
					RESULT = NullValue.Null; 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expression ::= UL_Nombre_Flottant 
            {
              Expression RESULT =null;
		Location flottantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flottantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String flottant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG96
 
					RESULT = new FloatingValue( flottant ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expression ::= UL_Caractere 
            {
              Expression RESULT =null;
		Location caracterexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location caracterexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String caractere = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG97
 
					RESULT = new CharacterValue( caractere ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expression ::= UL_Chaine 
            {
              Expression RESULT =null;
		Location chainexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chainexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG98
 
					RESULT = new StringValue( chaine ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expression ::= UL_Nouveau Type UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location taillexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location taillexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression taille = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG99
 
					RESULT = new ArrayAllocation( type, taille ); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG100
 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG101
 

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
