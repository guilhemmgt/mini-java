;(int []) tab = new int[ 5 ];
PUSH 1
;new int[ 5 ]
LOADL 5
LOADL 1
SUBR IMul
SUBR MAlloc
STORE (1) 0[SB]
; tab [ 3 ] = 2;
LOADL 2
;ArrayAssignement:  tab [ 3 ]
LOADA 0[SB]
LOADI (1)
LOADL 3
LOADL 1
SUBR IMul
SUBR IAdd
STOREI (1)
; tab [ 3 ] = 4;
LOADL 4
;ArrayAssignement:  tab [ 3 ]
LOADA 0[SB]
LOADI (1)
LOADL 3
LOADL 1
SUBR IMul
SUBR IAdd
STOREI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@c4437c4
;ArrayAccess: tab[ 3 ]
;(tab[ 3 ] == 4)
;print (tab[ 3 ] == 4);
LOAD (1) 0[SB]
LOADL 3
LOADL 1
SUBR IMul
SUBR IAdd
LOADI (1)
LOADL 4
SUBR IEq
SUBR BOut
;(< int, < < char, int>, char>> []) t = new < int, < < char, int>, char>>[ 5 ];
PUSH 1
;new < int, < < char, int>, char>>[ 5 ]
LOADL 5
LOADL 4
SUBR IMul
SUBR MAlloc
STORE (1) 1[SB]
; t [ 3 ] = < 1, < < 'a', 2>, 'b'>>;
LOADL 1
LOADL 97
LOADL 2
LOADL 98
;ArrayAssignement:  t [ 3 ]
LOADA 1[SB]
LOADI (1)
LOADL 3
LOADL 4
SUBR IMul
SUBR IAdd
STOREI (4)
;int a = (fst t[ 3 ]);
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@433c675d
;ArrayAccess: t[ 3 ]
;(fst t[ 3 ])
LOAD (1) 1[SB]
LOADL 3
LOADL 4
SUBR IMul
SUBR IAdd
LOADI (4)
POP (0) 3
STORE (1) 2[SB]
;char b = (fst (fst (sndt[ 3 ])));
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@3f91beef
;ArrayAccess: t[ 3 ]
;(sndt[ 3 ])
;(fst (sndt[ 3 ]))
;(fst (fst (sndt[ 3 ])))
LOAD (1) 1[SB]
LOADL 3
LOADL 4
SUBR IMul
SUBR IAdd
LOADI (4)
POP (3) 1
POP (0) 1
POP (0) 1
STORE (1) 3[SB]
;int c = (snd(fst (sndt[ 3 ])));
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@1a6c5a9e
;ArrayAccess: t[ 3 ]
;(sndt[ 3 ])
;(fst (sndt[ 3 ]))
;(snd(fst (sndt[ 3 ])))
LOAD (1) 1[SB]
LOADL 3
LOADL 4
SUBR IMul
SUBR IAdd
LOADI (4)
POP (3) 1
POP (0) 1
POP (1) 1
STORE (1) 4[SB]
;char d = (snd(sndt[ 3 ]));
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@37bba400
;ArrayAccess: t[ 3 ]
;(sndt[ 3 ])
;(snd(sndt[ 3 ]))
LOAD (1) 1[SB]
LOADL 3
LOADL 4
SUBR IMul
SUBR IAdd
LOADI (4)
POP (3) 1
POP (1) 2
STORE (1) 5[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@179d3b25
;(a == 1)
;((a == 1) && (b == 'a'))
;(((a == 1) && (b == 'a')) && (c == 2))
;((((a == 1) && (b == 'a')) && (c == 2)) && (d == 'b'))
;print ((((a == 1) && (b == 'a')) && (c == 2)) && (d == 'b'));
LOAD (1) 2[SB]
LOADL 1
SUBR IEq
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@254989ff
;(b == 'a')
LOAD (1) 3[SB]
LOADL 97
SUBR IEq
SUBR BAnd
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@5d099f62
;(c == 2)
LOAD (1) 4[SB]
LOADL 2
SUBR IEq
SUBR BAnd
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@37f8bb67
;(d == 'b')
LOAD (1) 5[SB]
LOADL 98
SUBR IEq
SUBR BAnd
SUBR BOut
POP (0) 6
HALT

