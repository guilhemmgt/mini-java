;int x = 3;
PUSH 1
LOADL 3
STORE (1) 0[SB]
;(int *) px = fr.n7.stl.block.ast.expression.accessible.AddressAccess@29ee9faa;
PUSH 1
LOADA 0[SB]
STORE (1) 1[SB]
;int y = (*px);
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@cc285f4
LOAD (1) 1[SB]
LOADI (1)
STORE (1) 2[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@55f3ddb1
;(x == 3)
;((x == 3) && (y == 3))
;print ((x == 3) && (y == 3));
LOAD (1) 0[SB]
LOADL 3
SUBR IEq
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@8bd1b6a
;(y == 3)
LOAD (1) 2[SB]
LOADL 3
SUBR IEq
SUBR BAnd
SUBR BOut
;print " ; ";
LOADL 34
LOADL 32
LOADL 59
LOADL 32
SUBR COut
SUBR COut
SUBR COut
;int z = 3;
PUSH 1
LOADL 3
STORE (1) 3[SB]
;IntPtr pz = fr.n7.stl.block.ast.expression.accessible.AddressAccess@c038203;
PUSH 1
LOADA 3[SB]
STORE (1) 4[SB]
;IntPtrTab t = new IntPtr[ 4 ];
PUSH 1
;new IntPtr[ 4 ]
LOADL 4
LOADL 1
SUBR IMul
SUBR MAlloc
STORE (1) 5[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@18be83e4
; t [ 1 ] = pz;
LOAD (1) 4[SB]
;ArrayAssignement:  t [ 1 ]
LOADA 5[SB]
LOADI (1)
LOADL 1
LOADL 1
SUBR IMul
SUBR IAdd
STOREI (1)
;int a = (*t[ 1 ]);
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@cb5822
;ArrayAccess: t[ 1 ]
LOAD (1) 5[SB]
LOADL 1
LOADL 1
SUBR IMul
SUBR IAdd
LOADI (1)
LOADI (1)
STORE (1) 6[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@4b9e13df
;(a == 3)
;print (a == 3);
LOAD (1) 6[SB]
LOADL 3
SUBR IEq
SUBR BOut
POP (0) 7
HALT

