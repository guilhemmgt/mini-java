;(PInt []) tab = new PInt[ t ];
PUSH 1
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@136432db
;new PInt[ t ]
LOADL 11
LOADL 1
SUBR IMul
SUBR MAlloc
STORE (1) 0[SB]
;boolean pair = true;
PUSH 1
LOADL 1
STORE (1) 1[SB]
;int a = 0;
PUSH 1
LOADL 0
STORE (1) 2[SB]
;int b = 1;
PUSH 1
LOADL 1
STORE (1) 3[SB]
;int i = 0;
PUSH 1
LOADL 0
STORE (1) 4[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@7382f612
;(i < t)
;while
while35
LOAD (1) 4[SB]
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@1055e4af
LOADL 11
SUBR ILss
JUMPIF (0) endwhile35
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@3caeaf62
;(pair == true)
; tab [ i ] = ((pair == true) ? fr.n7.stl.block.ast.expression.accessible.AddressAccess@7b3300e5 : fr.n7.stl.block.ast.expression.accessible.AddressAccess@2e5c649);
LOAD (1) 1[SB]
LOADL 1
SUBR IEq
JUMPIF (0) condexElse36
LOADA 2[SB]
JUMP condexEnd36
condexElse36
LOADA 3[SB]
condexEnd36
;ArrayAssignement:  tab [ i ]
LOADA 0[SB]
LOADI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@e6ea0c6
LOAD (1) 4[SB]
LOADL 1
SUBR IMul
SUBR IAdd
STOREI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@6a38e57f
;(pair == false)
; pair  = (pair == false);
LOAD (1) 1[SB]
LOADL 0
SUBR IEq
LOADA 1[SB]
STOREI (1)
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@5577140b
;(i + 1)
; i  = (i + 1);
LOAD (1) 4[SB]
LOADL 1
SUBR IAdd
LOADA 4[SB]
STOREI (1)
POP (0) 0
JUMP while35
endwhile35
;print "une suite de 0 et de 1: ";
LOADL 34
LOADL 32
LOADL 58
LOADL 49
LOADL 32
LOADL 101
LOADL 100
LOADL 32
LOADL 116
LOADL 101
LOADL 32
LOADL 48
LOADL 32
LOADL 101
LOADL 100
LOADL 32
LOADL 101
LOADL 116
LOADL 105
LOADL 117
LOADL 115
LOADL 32
LOADL 101
LOADL 110
LOADL 117
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
SUBR COut
;int j = 0;
PUSH 1
LOADL 0
STORE (1) 5[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@1c6b6478
;(j < t)
;while
while37
LOAD (1) 5[SB]
;fr.n7.stl.block.ast.expression.accessible.ConstantAccess@67f89fa3
LOADL 11
SUBR ILss
JUMPIF (0) endwhile37
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@4ac68d3e
;ArrayAccess: tab[ j ]
;print (*tab[ j ]);
LOAD (1) 0[SB]
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@277c0f21
LOAD (1) 5[SB]
LOADL 1
SUBR IMul
SUBR IAdd
LOADI (1)
LOADI (1)
SUBR IOut
;fr.n7.stl.block.ast.expression.accessible.VariableAccess@6073f712
;(j + 1)
; j  = (j + 1);
LOAD (1) 5[SB]
LOADL 1
SUBR IAdd
LOADA 5[SB]
STOREI (1)
POP (0) 0
JUMP while37
endwhile37
POP (0) 6
HALT

